import {db} from "../firebase";
import {generateRecraftFoodImage, markMealImageFailed} from "../utils/recraftImageGeneration";
import * as admin from "firebase-admin";

// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
const STATE_REF = db.collection("internal").doc("recraft_image_generation_state");

type RecraftScanState = {
  lastDocId?: string | null;
  // –±—ã–ª–æ: started_at?: FirebaseFirestore.Timestamp;
  started_at?: admin.firestore.Timestamp;
  finished?: boolean;
};

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –±–ª—é–¥–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
type MinimalMeal = {
  id: string;
  title?: string;
  title_localized?: { en?: string };
  description_localized?: { en?: string };
  comment?: string;
  meal_type?: string;
  tags?: string[];
  image_generation_source?: string;
};

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç meal_type –∫ –æ–¥–Ω–æ–º—É –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
 */
function normalizeMealType(t?: string): "full_meal" | "snack" | "drink" {
  return t === "snack" || t === "drink" ? t : "full_meal";
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
async function getScanState(): Promise<RecraftScanState> {
  const snap = await STATE_REF.get();
  return (snap.exists ? (snap.data() as RecraftScanState) : {}) || {};
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
async function setScanState(patch: Partial<RecraftScanState>): Promise<void> {
  await STATE_REF.set(
    {
      ...patch,
      updated_at: admin.firestore.Timestamp.now(),
    },
    {merge: true},
  );
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å–æ—Ä (–Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–¥ —Å –Ω–∞—á–∞–ª–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
 */
export async function resetRecraftScanCursor(): Promise<void> {
  await STATE_REF.set(
    {
      lastDocId: null,
      finished: false,
      started_at: admin.firestore.Timestamp.now(),
      updated_at: admin.firestore.Timestamp.now(),
    },
    {merge: true},
  );
  console.log("üîÑ –ö—É—Ä—Å–æ—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Recraft —Å–±—Ä–æ—à–µ–Ω");
}

/**
 * Debug function: check image generation status in meals
 */
export async function debugMealPhotos(): Promise<void> {
  console.log("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±–ª—é–¥–∞—Ö...");

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –±–ª—é–¥
    const snapshot = await db
      .collection("generated_meals")
      .limit(10)
      .get();

    if (snapshot.empty) {
      console.log("üì≠ –ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    snapshot.docs.forEach((doc, index) => {
      const data = doc.data();
      console.log(`${index + 1}. ID: ${doc.id}`);
      console.log(`   Title: ${data.title}`);
      console.log(`   Has photo: ${!!data.photo}`);
      console.log(`   Image source: ${data.image_generation_source || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);
      console.log(`   Is compressed: ${data.image_compressed || false}`);
      console.log(`   Has title_localized: ${!!data.title_localized}`);
      console.log(`   Has description_localized: ${!!data.description_localized}`);
      console.log(`   Image generation failed: ${data.image_generation_failed || false}`);
      console.log("---");
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalMeals = snapshot.docs.length;
    const recraftGenerated = snapshot.docs.filter((doc) =>
      doc.data().image_generation_source === "recraft-v3"
    );
    const needsRegeneration = snapshot.docs.filter((doc) => {
      const data = doc.data();
      return data.image_generation_source !== "recraft-v3" && !data.image_generation_failed;
    });
    const withEnglishData = snapshot.docs.filter((doc) => {
      const data = doc.data();
      return data.title_localized?.en && data.description_localized?.en;
    });

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ ${totalMeals} –±–ª—é–¥:`);
    console.log(`   –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã Recraft: ${recraftGenerated.length}`);
    console.log(`   –¢—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${needsRegeneration.length}`);
    console.log(`   –° –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${withEnglishData.length}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥:", error);
  }
}

/**
 * Test function: regenerate image for first meal not processed by Recraft
 */
export async function generateSingleTestImage(): Promise<void> {
  console.log("üß™ –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –±–ª—é–¥–æ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Recraft...");

  try {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –±–ª—é–¥–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ !=
    const mealsQuery = db
      .collection("generated_meals")
      .limit(50); // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ

    const snapshot = await mealsQuery.get();

    if (snapshot.empty) {
      console.log("üì≠ –ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤ –∫–æ–¥–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è —Ä–∞–Ω–µ–µ —É–ø–∞–≤—à–∏–µ)
    const needRegenerationDocs = snapshot.docs.filter((doc) => {
      const data = doc.data();
      const needsRegeneration = data.image_generation_source !== "recraft-v3";
      const hasEnglishData = data.title_localized?.en && data.description_localized?.en;

      // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω–µ–µ —É–ø–∞–≤—à–∏–µ: –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      return needsRegeneration && (hasEnglishData || data.title);
    });

    if (needRegenerationDocs.length === 0) {
      console.log("üì≠ –í—Å–µ –±–ª—é–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã Recraft'–æ–º –∏–ª–∏ –∏–º–µ—é—Ç –æ—à–∏–±–∫–∏");
      console.log("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...");
      await debugMealPhotos();
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${needRegenerationDocs.length} –±–ª—é–¥ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –±–ª—é–¥–æ
    const doc = needRegenerationDocs[0];
    const meal: MinimalMeal = {id: doc.id, ...(doc.data() as Partial<MinimalMeal>)};

    console.log(`üéØ –í—ã–±—Ä–∞–Ω–æ –±–ª—é–¥–æ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${meal.title} (ID: ${meal.id})`);
    console.log(`üîÑ –¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${meal.image_generation_source || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã (—Å fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–µ)
    const englishTitle = meal.title_localized?.en || meal.title;
    const englishDescription = meal.description_localized?.en ||
                              meal.comment ||
                              `A delicious ${meal.title}`;

    if (!englishTitle) {
      console.log(`‚ö†Ô∏è –ë–ª—é–¥–æ ${meal.title} –Ω–µ –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    if (!meal.id) {
      console.log(`‚ö†Ô∏è –ë–ª—é–¥–æ ${meal.title} –Ω–µ –∏–º–µ–µ—Ç ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    console.log(`üé® –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: ${englishTitle}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${englishDescription}`);

    const result = await generateRecraftFoodImage({
      englishTitle,
      englishDescription,
      mealType: normalizeMealType(meal.meal_type),
      tags: meal.tags || [],
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ –∏ —Ñ–ª–∞–≥–∞–º–∏
    await db.collection("generated_meals").doc(meal.id).update({
      photo: result.photoUrl,
      blurhash: result.blurhash,
      image_generated_at: admin.firestore.Timestamp.now(),
      image_generation_source: "recraft-v3", // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ Recraft'–æ–º!
      image_compressed: true,
      previous_photo_regenerated: true, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      image_generation_failed: false,
      image_generation_error: admin.firestore.FieldValue.delete(),
      image_generation_failed_at: admin.firestore.FieldValue.delete(),
    });

    console.log("‚úÖ –ü–ï–†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:");
    console.log(`üîó Photo URL: ${result.photoUrl}`);
    console.log(`üé® Blurhash: ${result.blurhash}`);
    console.log(`üçΩÔ∏è –ë–ª—é–¥–æ: ${meal.title}`);
    console.log(`üÜî ID: ${meal.id}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
    throw error;
  }
}

/**
 * Process batch of meals for image regeneration
 */
export async function generateImagesBatch(): Promise<{
  processed: number;
  generated: number;
  failed: number;
  hasMore: boolean;
}> {
  const BATCH_SIZE = 10;
  const SCAN_PAGE_SIZE = 200;

  console.log(`üì¶ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: batch=${BATCH_SIZE}, scanPage=${SCAN_PAGE_SIZE}`);

  try {
    // 1) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    const state = await getScanState();
    const lastDocId = state.lastDocId || null;

    // 2) –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å (—É–±—Ä–∞–ª–∏ –ª–∏—à–Ω–∏–µ –∫–∞—Å—Ç—ã —Ç–∏–ø–æ–≤)
    let query = db
      .collection("generated_meals")
      .orderBy(admin.firestore.FieldPath.documentId())
      .limit(SCAN_PAGE_SIZE);

    if (lastDocId) {
      query = query.startAfter(lastDocId);
      console.log(`‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ—Å–ª–µ docId=${lastDocId}`);
    } else {
      console.log("üèÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –Ω–∞—á–∞–ª–∞");
    }

    const snapshot = await query.get();

    if (snapshot.empty) {
      // –î–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç
      await setScanState({lastDocId: null, finished: true});
      console.log("‚úÖ –ö–æ–Ω–µ—Ü –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã. –ö—É—Ä—Å–æ—Ä —Å–±—Ä–æ—à–µ–Ω.");
      return {processed: 0, generated: 0, failed: 0, hasMore: false};
    }

    const pageDocCount = snapshot.docs.length;
    const lastDocOnPage = snapshot.docs[pageDocCount - 1];
    if (!lastDocOnPage) {
      // –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ, —Ç.–∫. snapshot.empty –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ,
      // –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∑–∞—â–∏—Ç—É –¥–ª—è –ª–∏–Ω—Ç–µ—Ä–∞ –∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
      await setScanState({lastDocId: null, finished: true});
      console.log("‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
      return {processed: 0, generated: 0, failed: 0, hasMore: false};
    }
    const lastDocOnPageId = lastDocOnPage.id;
    const pageHasMore = pageDocCount === SCAN_PAGE_SIZE;

    console.log(`üîç –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${pageDocCount}. –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${lastDocOnPageId}`);

    // 3) –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–µ—Ö, –∫—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è —Ä–∞–Ω–µ–µ —É–ø–∞–≤—à–∏–µ)
    const candidates = snapshot.docs.filter((doc) => {
      const data = doc.data();
      const needsRegeneration = data.image_generation_source !== "recraft-v3";
      const hasData = data.title_localized?.en || data.title;
      // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω–µ–µ —É–ø–∞–≤—à–∏–µ: –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      return needsRegeneration && hasData;
    });

    if (candidates.length === 0) {
      // –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
      await setScanState({lastDocId: lastDocOnPageId, finished: !pageHasMore});
      console.log("üì≠ –ù–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç. –ü—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è –ø–æ –∫—É—Ä—Å–æ—Ä—É.");
      return {
        processed: 0,
        generated: 0,
        failed: 0,
        hasMore: pageHasMore, // –µ—â—ë –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
      };
    }

    // 4) –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º BATCH_SIZE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    const toProcess = candidates.slice(0, BATCH_SIZE);
    console.log(`üìä –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${candidates.length}. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${toProcess.length}`);

    let processedCount = 0;
    let generatedCount = 0;
    let failedCount = 0;

    for (const doc of toProcess) {
      // –Ø–≤–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ç–∏–ø–æ–≤
      const data = doc.data() as Partial<MinimalMeal>;
      const meal: MinimalMeal = {id: doc.id, ...data};
      processedCount++;

      if (!meal.id) {
        console.log(`‚ö†Ô∏è –ë–ª—é–¥–æ ${meal.title} –±–µ–∑ ID ‚Äî –ø—Ä–æ–ø—É—Å–∫`);
        continue;
      }

      try {
        const englishTitle = meal.title_localized?.en || meal.title;
        const englishDescription =
          meal.description_localized?.en || meal.comment || `A delicious ${meal.title}`;
        if (!englishTitle) {
          console.log(`‚ö†Ô∏è ${meal.title} –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫`);
          continue;
        }

        console.log(
          `üé® ${processedCount}/${toProcess.length} –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${englishTitle} (old src: ` +
          `${meal.image_generation_source || "n/a"})`
        );

        const result = await generateRecraftFoodImage({
          englishTitle,
          englishDescription,
          mealType: normalizeMealType(meal.meal_type),
          tags: meal.tags || [],
        });

        await db.collection("generated_meals").doc(meal.id).update({
          photo: result.photoUrl,
          blurhash: result.blurhash,
          image_generated_at: admin.firestore.Timestamp.now(),
          image_generation_source: "recraft-v3",
          image_compressed: true,
          previous_photo_regenerated: true,
          updated_time: admin.firestore.Timestamp.now(),
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          image_generation_failed: false,
          image_generation_error: admin.firestore.FieldValue.delete(),
          image_generation_failed_at: admin.firestore.FieldValue.delete(),
        });

        generatedCount++;
        console.log(`‚úÖ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${meal.title} -> ${result.photoUrl}`);

        // –õ—ë–≥–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise((r) => setTimeout(r, 500));
      } catch (error) {
        failedCount++;
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${meal.title}: ${errorMessage}`);
        await markMealImageFailed(meal.id, errorMessage);
      }
    }

    // 5) –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —Å–∫–∞–Ω —à—ë–ª –≤–ø–µ—Ä—ë–¥
    await setScanState({lastDocId: lastDocOnPageId, finished: !pageHasMore});

    const logMessage =
      `üìä –ë–∞—Ç—á: –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ=${pageDocCount}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=${processedCount}, ` +
      `–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ=${generatedCount}, –æ—à–∏–±–æ–∫=${failedCount}, hasMore=${pageHasMore}`;
    console.log(logMessage);

    return {
      processed: processedCount,
      generated: generatedCount,
      failed: failedCount,
      hasMore: pageHasMore, // –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∞ –Ω–µ –Ω–∞ count –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
}
