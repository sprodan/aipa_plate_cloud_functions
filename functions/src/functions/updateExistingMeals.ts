/**
 * Update existing meals with new description fields using OpenAI
 */

import {db} from "../firebase";
import {callOpenAI, textMsg} from "../utils/openai";
import {COLLECTIONS, GeneratedMeal} from "../types/firestore";
import {ALL_TAGS} from "../constants/tags";
import * as admin from "firebase-admin";

interface MealUpdateData {
  title_localized: {
    en: string;
    ru: string;
  };
  description_localized: {
    en: string;
    ru: string;
  };
  benefits: {
    en: string;
    ru: string;
  };
  improvements: {
    en: string;
    ru: string;
  };
  ingredients: {
    en: string[];
    ru: string[];
  };
  recipe: {
    en: string;
    ru: string;
  };
  healthy_alternatives: {
    en: string;
    ru: string;
  };
  meal_type: "full_meal" | "snack" | "drink";
  difficulty: "very_easy" | "easy" | "medium";
  prep_time_minutes: number;
  is_comfort_food: boolean;
  is_healthy_alternative: boolean;
}

/**
 * Clean and parse JSON response from GPT
 */
function parseGptJsonResponse(responseText: string): MealUpdateData {
  let cleanedText = responseText.trim();

  // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
  if (cleanedText.startsWith("```json")) {
    cleanedText = cleanedText.replace(/^```json\s*/, "");
  }
  if (cleanedText.startsWith("```")) {
    cleanedText = cleanedText.replace(/^```\s*/, "");
  }
  if (cleanedText.endsWith("```")) {
    cleanedText = cleanedText.replace(/\s*```$/, "");
  }

  // –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  cleanedText = cleanedText.trim();

  try {
    const parsed = JSON.parse(cleanedText) as MealUpdateData;
    return parsed;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);
    console.error("üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:", responseText.substring(0, 500) + "...");
    console.error("üßπ –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", cleanedText.substring(0, 500) + "...");
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    throw new Error(`Failed to parse JSON response: ${errorMessage}`);
  }
}

/**
 * Generate enhanced description for existing meal using GPT-4o
 */
async function generateEnhancedMealDescription(
  meal: GeneratedMeal
): Promise<MealUpdateData> {
  const logMessage = `ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–ª—é–¥–∞: ${meal.title}`;
  console.log(logMessage);

  const availableTags = ALL_TAGS.join(", ");
  const systemPrompt = [
    "You are a professional nutrition coach following MyPlate guidelines.",
    "You have an existing meal that needs enhanced descriptions.",
    "Generate comprehensive information for this meal.",
    "",
    "Requirements:",
    "- Title: max 35 characters (both languages)",
    "- Generate realistic, detailed descriptions",
    "- Include simple snacks (like \"Apple\" or \"Banana\") when appropriate",
    "- Cooking time: 0‚Äì20 minutes maximum",
    "- IMPORTANT: Always provide detailed cooking instructions",
    "- Be creative and detailed in descriptions while staying realistic",
    "",
    `Available tags: ${availableTags}`,
    "",
    "IMPORTANT: Return ONLY valid JSON without any markdown formatting or code blocks.",
    "",
    "Return JSON with this exact structure:",
    "{",
    "  \"title_localized\": {",
    "    \"en\": \"English title (‚â§35 chars)\",",
    "    \"ru\": \"–†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (‚â§35 —Å–∏–º–≤–æ–ª–æ–≤)\"",
    "  },",
    "  \"description_localized\": {",
    "    \"en\": \"Detailed English description of the dish, its taste, texture,",
    "           aroma, and nutritional value (2-3 sentences)\",",
    "    \"ru\": \"–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, –µ–≥–æ –≤–∫—É—Å–∞, —Ç–µ–∫—Å—Ç—É—Ä—ã, –∞—Ä–æ–º–∞—Ç–∞",
    "           –∏ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\"",
    "  },",
    "  \"benefits\": {",
    "    \"en\": \"What's good about this food - specific health benefits, vitamins,",
    "           minerals, nutrients, and how they help the body\",",
    "    \"ru\": \"–ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –≤ —ç—Ç–æ–π –µ–¥–µ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–ª—å–∑–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è,",
    "           –≤–∏—Ç–∞–º–∏–Ω—ã, –º–∏–Ω–µ—Ä–∞–ª—ã, –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–º—É\"",
    "  },",
    "  \"improvements\": {",
    "    \"en\": \"What could be improved - suggest healthier cooking methods,",
    "           portion sizes, ingredient substitutions, or timing\",",
    "    \"ru\": \"–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è,",
    "           —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Ä—Ü–∏–π, –∑–∞–º–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞\"",
    "  },",
    "  \"ingredients\": {",
    "    \"en\": [\"ingredient1\", \"ingredient2\", \"ingredient3\"],",
    "    \"ru\": [\"–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç1\", \"–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç2\", \"–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç3\"]",
    "  },",
    "  \"recipe\": {",
    "    \"en\": \"DETAILED step-by-step cooking instructions. Include prep time,",
    "           cooking method, temperature if needed, and serving suggestions.",
    "           For simple items like fruits, explain how to select, prepare,",
    "           and serve.\",",
    "    \"ru\": \"–ü–û–î–†–û–ë–ù–´–ï –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é. –í–∫–ª—é—á–∏—Ç–µ –≤—Ä–µ–º—è",
    "           –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ —Å–æ–≤–µ—Ç—ã",
    "           –ø–æ –ø–æ–¥–∞—á–µ. –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∫ —Ñ—Ä—É–∫—Ç—ã, –æ–±—ä—è—Å–Ω–∏—Ç–µ –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å,",
    "           –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏ –ø–æ–¥–∞—Ç—å.\"",
    "  },",
    "  \"healthy_alternatives\": {",
    "    \"en\": \"Healthy ingredient swaps and substitutions to make this dish",
    "           more nutritious or lower calorie\",",
    "    \"ru\": \"–ó–¥–æ—Ä–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–ª—é–¥–æ",
    "           –±–æ–ª–µ–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –º–µ–Ω–µ–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–º\"",
    "  },",
    "  \"meal_type\": \"full_meal\",",
    "  \"difficulty\": \"easy\",",
    "  \"prep_time_minutes\": 15,",
    "  \"is_comfort_food\": false,",
    "  \"is_healthy_alternative\": true",
    "}",
    "",
    "Focus on realistic, achievable recipes that match the existing meal data",
    "and nutritional profile.",
    "",
    "Remember: Return ONLY the JSON object, no markdown formatting,",
    "no code blocks, no additional text.",
  ].join("\n");

  const mealInfo = `
 Existing meal:
 - Title: ${meal.title}
 - Description: ${meal.comment || "No description"}
 - Calories: ${meal.calories}
 - Proteins: ${meal.proteins}g
 - Fats: ${meal.fats}g
 - Carbs: ${meal.carbohydrates}g
 - Tags: ${meal.tags?.join(", ") || "None"}
 - Language: ${meal.language || "en"}
 `;

  const messages = [
    textMsg("developer", systemPrompt),
    textMsg("user", ["Generate enhanced description for this meal:", mealInfo].join("\n")),
  ];

  try {
    const model = "gpt-5-mini";
    const {text: responseText, usage} = await callOpenAI({
      model,
      messages,
      responseFormat: "json_object",
      reasoningEffort: "low",
      // tools: []
    });
    if (usage) {
      console.log("üßÆ Tokens:", {
        prompt: usage.prompt_tokens,
        completion: usage.completion_tokens,
        total: usage.total_tokens,
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON
    const updateData = parseGptJsonResponse(responseText);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (!updateData.title_localized || !updateData.description_localized || !updateData.benefits) {
      throw new Error("Invalid response structure: missing required fields");
    }

    console.log(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ${meal.title}`);
    return updateData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${meal.title}:`, error);
    throw error;
  }
}

/**
 * Update a single meal with enhanced descriptions (with retry logic)
 */
async function updateSingleMeal(
  mealId: string,
  meal: GeneratedMeal
): Promise<boolean> {
  const maxRetries = 3;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è)
      if (meal.description_localized && meal.benefits && meal.ingredients) {
        console.log(`‚è≠Ô∏è –ë–ª—é–¥–æ ${meal.title} —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return true;
      }

      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${meal.title}`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      const updateData = await generateEnhancedMealDescription(meal);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firestore (–ù–ï —Ç—Ä–æ–≥–∞–µ–º —Ñ–æ—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)
      await db.collection(COLLECTIONS.GENERATED_MEALS).doc(mealId).update({
        ...updateData,
        updated_time: admin.firestore.Timestamp.now(),
      });

      console.log(`‚úÖ –ë–ª—é–¥–æ ${meal.title} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ ${meal.title} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}): ${errorMessage}`);

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è JSON –æ—à–∏–±–æ–∫
      if (errorMessage.includes("JSON") || errorMessage.includes("parse")) {
        console.error(`üîç JSON parsing error details for ${meal.title}:`, error);
      }

      if (attempt === maxRetries) {
        console.error(`üí• –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${meal.title} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
        return false;
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (exponential backoff)
      const delay = Math.pow(2, attempt) * 1000; // 2s, 4s, 8s
      console.log(`‚è≥ –ñ–¥–µ–º ${delay/1000}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
  }

  return false;
}

/**
 * Update existing meals in batches (optimized for long-running process)
 */
async function updateMealsInBatches(startAfter?: string): Promise<{
  processed: number;
  updated: number;
  hasMore: boolean;
  lastProcessedId?: string;
}> {
  const BATCH_SIZE = 5; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å GPT-4o

  console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –±–ª—é–¥ (—Ä–∞–∑–º–µ—Ä: ${BATCH_SIZE})`);

  let query = db
    .collection(COLLECTIONS.GENERATED_MEALS)
    .orderBy("created_time", "asc")
    .limit(BATCH_SIZE);

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ –Ω–µ—ë
  if (startAfter) {
    const startDoc = await db.collection(COLLECTIONS.GENERATED_MEALS).doc(startAfter).get();
    if (startDoc.exists) {
      query = query.startAfter(startDoc);
    }
  }

  const mealsSnap = await query.get();

  if (mealsSnap.empty) {
    console.log("üì≠ –ë–æ–ª—å—à–µ –±–ª—é–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç");
    return {processed: 0, updated: 0, hasMore: false};
  }

  let processedCount = 0;
  let updatedCount = 0;
  let lastProcessedId = "";

  for (const doc of mealsSnap.docs) {
    const meal = doc.data() as GeneratedMeal;
    lastProcessedId = doc.id;
    processedCount++;

    try {
      const success = await updateSingleMeal(doc.id, meal);
      if (success) {
        updatedCount++;
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ ${meal.title} (${doc.id}):`, error);
    }
  }

  const hasMore = processedCount === BATCH_SIZE;

  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª—é–¥: ${processedCount}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);

  return {
    processed: processedCount,
    updated: updatedCount,
    hasMore,
    lastProcessedId,
  };
}

/**
 * Process only one batch (for scheduled updates)
 */
export async function updateSingleBatchOnly(): Promise<{
  processed: number;
  updated: number;
  hasMore: boolean;
}> {
  console.log("üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –±–∞—Ç—á (scheduled)...");

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const progressDoc = await db.collection("system").doc("meal_update_progress").get();
    let startAfter: string | undefined;

    if (progressDoc.exists) {
      startAfter = progressDoc.data()?.lastProcessedId;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –±–∞—Ç—á
    const result = await updateMealsInBatches(startAfter);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (result.hasMore && result.lastProcessedId) {
      await db.collection("system").doc("meal_update_progress").set({
        lastProcessedId: result.lastProcessedId,
        totalProcessed: (progressDoc.data()?.totalProcessed || 0) + result.processed,
        totalUpdated: (progressDoc.data()?.totalUpdated || 0) + result.updated,
        lastUpdate: admin.firestore.Timestamp.now(),
      });
    } else {
      // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      await db.collection("system").doc("meal_update_progress").delete();
      console.log("üéâ –í—Å–µ –±–ª—é–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω.");
    }

    return {
      processed: result.processed,
      updated: result.updated,
      hasMore: result.hasMore,
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞:", error);
    throw error;
  }
}

/**
 * Get update statistics
 */
export async function getUpdateStats(): Promise<{
  totalProcessed: number;
  totalUpdated: number;
  lastUpdate: string;
  hasMore: boolean;
}> {
  try {
    const progressDoc = await db.collection("system").doc("meal_update_progress").get();

    if (progressDoc.exists) {
      const data = progressDoc.data();
      if (data) {
        return {
          totalProcessed: data.totalProcessed || 0,
          totalUpdated: data.totalUpdated || 0,
          lastUpdate: data.lastUpdate?.toDate()?.toISOString() || "Never",
          hasMore: true,
        };
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º return statement –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ data –ø—É—Å—Ç–∞—è
    return {
      totalProcessed: 0,
      totalUpdated: 0,
      lastUpdate: "Never",
      hasMore: false,
    };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    throw error;
  }
}

/**
 * Check if update process is already running (enhanced)
 */
export async function isUpdateProcessRunning(): Promise<boolean> {
  try {
    const lockDoc = await db.collection("system").doc("meal_update_lock").get();
    if (!lockDoc.exists) return false;

    const lockData = lockDoc.data();
    const lockTime = lockData?.timestamp?.toDate();
    const now = new Date();

    // –î–ª—è scheduled updates —Å–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ 30 –º–∏–Ω—É—Ç
    if (lockTime && (now.getTime() - lockTime.getTime()) > 30 * 60 * 1000) {
      console.log("üîì –°—Ç–∞—Ä–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (30+ –º–∏–Ω), —Å–Ω–∏–º–∞–µ–º...");
      await releaseLock();
      return false;
    }

    return lockData?.locked === true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error);
    return false;
  }
}

/**
 * Acquire lock for update process
 */
export async function acquireLock(): Promise<boolean> {
  try {
    const lockRef = db.collection("system").doc("meal_update_lock");

    await lockRef.set({
      locked: true,
      timestamp: admin.firestore.Timestamp.now(),
      process_id: `update_${Date.now()}`,
    });

    console.log("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error);
    return false;
  }
}

/**
 * Release lock for update process
 */
export async function releaseLock(): Promise<void> {
  try {
    await db.collection("system").doc("meal_update_lock").delete();
    console.log("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error);
  }
}

/**
 * Main function to update all existing meals (with locking mechanism)
 */
export async function updateAllExistingMeals(): Promise<void> {
  console.log("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª—é–¥ —Å GPT-4o...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
  if (await isUpdateProcessRunning()) {
    const message = "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.";
    console.log(message);
    throw new Error("Update process already running");
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
  const lockAcquired = await acquireLock();
  if (!lockAcquired) {
    throw new Error("Failed to acquire lock");
  }

  try {
    let totalProcessed = 0;
    let totalUpdated = 0;
    let startAfter: string | undefined;
    let batchNumber = 1;

    // eslint-disable-next-line no-constant-condition
    while (true) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á ${batchNumber}...`);
      const batchStartTime = Date.now();

      const result = await updateMealsInBatches(startAfter);

      totalProcessed += result.processed;
      totalUpdated += result.updated;
      startAfter = result.lastProcessedId;

      const batchDuration = (Date.now() - batchStartTime) / 1000;
      console.log(
        `üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated}`
      );
      console.log(`‚è±Ô∏è –ë–∞—Ç—á ${batchNumber} –∑–∞–Ω—è–ª ${batchDuration.toFixed(1)}—Å`);

      batchNumber++;

      // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –±–ª—é–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if (!result.hasMore) {
        break;
      }

      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      console.log("‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ 5 —Å–µ–∫—É–Ω–¥...");
      await new Promise((resolve) => setTimeout(resolve, 5000));
    }

    const message =
      `\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}, ` +
      `–æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated}`;
    console.log(message);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ updateAllExistingMeals:", error);
    throw error;
  } finally {
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await releaseLock();
  }
}

/**
 * Update specific number of meals (for testing)
 */
export async function updateLimitedMeals(limit = 5): Promise<void> {
  console.log(`üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${limit} –±–ª—é–¥...`);

  try {
    const mealsSnap = await db
      .collection(COLLECTIONS.GENERATED_MEALS)
      .limit(limit)
      .get();

    if (mealsSnap.empty) {
      console.log("üì≠ –ë–ª—é–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    let updatedCount = 0;

    for (const doc of mealsSnap.docs) {
      const meal = doc.data() as GeneratedMeal;

      try {
        const success = await updateSingleMeal(doc.id, meal);
        if (success) {
          updatedCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ ${doc.id}:`, error);
      }
    }

    const message = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: " +
                   `${updatedCount}/${mealsSnap.docs.length} –±–ª—é–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`;
    console.log(message);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ updateLimitedMeals:", error);
    throw error;
  }
}
