import {logger} from "firebase-functions";
import {callOpenAI, callOpenAIImage, textMsg, imageMsg} from "../utils/openai";
import {DocumentReference} from "firebase-admin/firestore";
import {compressAndUploadImage} from "../utils/imageUtils";
import {db, bucket} from "../firebase";
import {generateSuggestionForUser} from "./generateSuggestions";
import {User} from "../types/firestore";
import {ALL_TAGS} from "../constants/tags";

/**
 * Analyze a meal using OpenAI and update Firestore with results.
 *
 * @param {string} mealId Meal document ID in Firestore.
 * @param {Record<string, unknown>} mealData Meal document data from Firestore.
 * @returns {Promise<void>}
 */
export async function analyzeMeal(
  mealId: string,
  mealData: Record<string, unknown>
): Promise<void> {
  try {
    logger.info("üîç Starting analysis:", {mealId, mealData});

    const mealRef = db.collection("meals").doc(mealId);

    const {
      photo,
      user_description,
      language = "en",
      blurhash_photo: existingBlurhash,
      user_ref,
    } = mealData;

    if (!photo && !user_description) {
      logger.info("‚ÑπÔ∏è No photo or description, skipped");
      await mealRef.update({isAnalysing: false, isFood: false});
      return;
    }

    let finalPhoto = photo as string | undefined;
    let blurhash = existingBlurhash as string | undefined;

    if (!finalPhoto && user_description) {
      const imageResult = await callOpenAIImage({
        model: "dall-e-3",
        prompt: `Realistic food photo: ${user_description}. High quality, natural lighting.`,
        size: "1024x1024",
        count: 1,
      });

      const imageUrl = imageResult.urls[0];
      if (!imageUrl) throw new Error("Image generation failed");

      const {photoUrl, blurhash: newBlurhash} =
        await compressAndUploadImage(imageUrl, bucket, mealId);

      finalPhoto = photoUrl;
      blurhash = newBlurhash;
      logger.info("‚úÖ Generated image uploaded", {photoUrl});
    }

    const systemPrompt = language === "ru" ?
      // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
      "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å 15+ –ª–µ—Ç –æ–ø—ã—Ç–∞. " +
      "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ/–æ–ø–∏—Å–∞–Ω–∏—é —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.\n\n" +
      "üîç –ü–û–®–ê–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–û–†–¶–ò–ô:\n" +
      "1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Å—É–¥—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞ ~26—Å–º, —á–∞—à–∫–∞ ~200–º–ª, –ª–æ–∂–∫–∞ ~15–º–ª)\n" +
      "2. –ò–∑–º–µ—Ä—å –ø–æ—Ä—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—É–¥—ã (1/2 —Ç–∞—Ä–µ–ª–∫–∏, 3/4 —á–∞—à–∫–∏)\n" +
      "3. –û—Ü–µ–Ω–∏ —Ç–æ–ª—â–∏–Ω—É/–≤—ã—Å–æ—Ç—É —Å–ª–æ–µ–≤ –µ–¥—ã (—Ç–æ–Ω–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, —Ç–æ–ª—Å—Ç—ã–π —Å–ª–æ–π)\n" +
      "4. –ù–∞–π–¥–∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–º–æ–Ω–µ—Ç–∞ ~2—Å–º, –ø–∞–ª–µ—Ü ~1.5—Å–º —à–∏—Ä–∏–Ω–∞)\n\n" +
      "‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π –°–ö–†–´–¢–´–ï –∫–∞–ª–æ—Ä–∏–∏:\n" +
      "- –ú–∞—Å–ª–æ –¥–ª—è –∂–∞—Ä–∫–∏: 1 —Å—Ç.–ª. = 120 –∫–∫–∞–ª\n" +
      "- –°–æ—É—Å—ã/–∑–∞–ø—Ä–∞–≤–∫–∏: –º–∞–π–æ–Ω–µ–∑ 1 —Å—Ç.–ª. = 90 –∫–∫–∞–ª, –∫–µ—Ç—á—É–ø = 20 –∫–∫–∞–ª\n" +
      "- –°—ã—Ä: –¥–∞–∂–µ —Ç–æ–Ω–∫–∏–π —Å–ª–æ–π = 40-80 –∫–∫–∞–ª\n" +
      "- –°–ª–∏–≤–∫–∏ –≤ –∫–æ—Ñ–µ/—Å—É–ø–µ: 2 —Å—Ç.–ª. = 80 –∫–∫–∞–ª\n" +
      "- –û—Ä–µ—Ö–∏/—Å–µ–º–µ—á–∫–∏: –≥–æ—Ä—Å—Ç—å = 160-200 –∫–∫–∞–ª\n\n" +
      "üìä –†–ê–°–ß–ï–¢ –ö–ê–õ–û–†–ò–ô:\n" +
      "- –°—á–∏—Ç–∞–π –∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –≤–µ—Å—É\n" +
      "- –°—É–º–º–∏—Ä—É–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n" +
      "- –ö–∞–ª–æ—Ä–∏–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.1 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 347.8, –ù–ï 350)\n" +
      "- –ë–µ–ª–∫–∏/–∂–∏—Ä—ã/—É–≥–ª–µ–≤–æ–¥—ã —Ç–æ–∂–µ —Å –¥–µ—Å—è—Ç—ã–º–∏\n\n" +
      "üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è—Ö (–¥–æ–±–∞–≤–ª—è–π –≤ comment):\n" +
      "- –ù–∞—Ç—Ä–∏–π >2300–º–≥: '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –º–Ω–æ–≥–æ —Å–æ–ª–∏, –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –∂–∏–¥–∫–æ—Å—Ç–∏'\n" +
      "- –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã >20–≥: '–í—ã—Å–æ–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –∂–∏—Ä–æ–≤'\n" +
      "- –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∞—Ö–∞—Ä >25–≥: '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–æ—Ä–º—ã —Å–∞—Ö–∞—Ä–∞'\n" +
      "- –ö–∞–ª–æ—Ä–∏–∏ >800: '–û—á–µ–Ω—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –±–ª—é–¥–æ'\n\n" +
      "üî¨ –ú–ò–ö–†–û–ù–£–¢–†–ò–ï–ù–¢–´ (–±—É–¥—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω):\n" +
      "- –ö–ª–µ—Ç—á–∞—Ç–∫–∞: –æ–≤–æ—â–∏ ~2-5–≥/100–≥, —Ñ—Ä—É–∫—Ç—ã ~2-10–≥/100–≥\n" +
      "- –û–º–µ–≥–∞-3: —Ä—ã–±–∞ ~500-2000–º–≥, –æ—Ä–µ—Ö–∏ ~100-500–º–≥\n" +
      "- –í–∏—Ç–∞–º–∏–Ω C: —Ü–∏—Ç—Ä—É—Å—ã ~50-80–º–≥, –æ–≤–æ—â–∏ ~10-100–º–≥\n" +
      "- –ñ–µ–ª–µ–∑–æ: –º—è—Å–æ ~2-5–º–≥, –±–æ–±–æ–≤—ã–µ ~2-8–º–≥\n" +
      "- –ö–∞–ª—å—Ü–∏–π: –º–æ–ª–æ—á–Ω—ã–µ ~100-300–º–≥, –∑–µ–ª–µ–Ω—å ~100-200–º–≥\n\n" +
      "‚ùå –ï—Å–ª–∏ –ù–ï –µ–¥–∞ (–ª—é–¥–∏, –∂–∏–≤–æ—Ç–Ω—ã–µ, –ø—Ä–µ–¥–º–µ—Ç—ã), –≤–µ—Ä–Ω–∏:\n" +
      "{ \"isFood\": false }\n\n" +
      "‚úÖ –ï—Å–ª–∏ –µ–¥–∞, –≤–µ—Ä–Ω–∏ —Ç–æ—á–Ω—ã–π JSON:\n" +
      "{\n" +
      "  \"isFood\": true,\n" +
      "  \"title\": \"—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\",\n" +
      "  \"comment\": \"–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–ª—é—Å—ã + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è—Ö, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ç—ã, 100-150 —Å–∏–º–≤–æ–ª–æ–≤\",\n" +
      "  \"benefits\": \"—á—Ç–æ –ø–æ–ª—É—á–∏—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: —ç–Ω–µ—Ä–≥–∏—è, —Å—ã—Ç–æ—Å—Ç—å, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã, 80-120 —Å–∏–º–≤–æ–ª–æ–≤\",\n" +
      "  \"improvements\": \"–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑ —Ü–∏—Ñ—Ä (–¥–æ–±–∞–≤—å –æ–≥—É—Ä—Ü—ã, —É–±–µ—Ä–∏ –º–∞–π–æ–Ω–µ–∑), 80-120 —Å–∏–º–≤–æ–ª–æ–≤\",\n" +
      "  \"ingredients\": [\"–≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∏ —Å–∫—Ä—ã—Ç—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\", \"–Ω–∞ —Ä—É—Å—Å–∫–æ–º\", \"–≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∏ –∏ —Å–æ—É—Å—ã\"],\n" +
      "  \"healthy_alternatives\": \"–∑–¥–æ—Ä–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã (–∞–≤–æ–∫–∞–¥–æ –≤–º–µ—Å—Ç–æ –º–∞—Å–ª–∞, –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç), –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤\",\n" +
      "  \"calories\": —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –¥–µ—Å—è—Ç—ã–º–∏,\n" +
      "  \"proteins\": –≥—Ä–∞–º–º—ã —Å –¥–µ—Å—è—Ç—ã–º–∏,\n" +
      "  \"fats\": –≥—Ä–∞–º–º—ã —Å –¥–µ—Å—è—Ç—ã–º–∏,\n" +
      "  \"carbohydrates\": –≥—Ä–∞–º–º—ã —Å –¥–µ—Å—è—Ç—ã–º–∏,\n" +
      "  \"fiber_mg\": –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –≤ –º–≥ (—Ä–µ–∞–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–π),\n" +
      "  \"omega3_mg\": –æ–º–µ–≥–∞-3 –≤ –º–≥,\n" +
      "  \"added_sugar_mg\": –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∞—Ö–∞—Ä –≤ –º–≥,\n" +
      "  \"saturated_fats_mg\": –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã –≤ –º–≥,\n" +
      "  \"sodium_mg\": –Ω–∞—Ç—Ä–∏–π –≤ –º–≥,\n" +
      "  \"vitamin_c_mg\": –≤–∏—Ç–∞–º–∏–Ω C –≤ –º–≥,\n" +
      "  \"iron_mg\": –∂–µ–ª–µ–∑–æ –≤ –º–≥,\n" +
      "  \"calcium_mg\": –∫–∞–ª—å—Ü–∏–π –≤ –º–≥,\n" +
      `  "tags": [—Ç–µ–≥–∏ –¢–û–õ–¨–ö–û –∏–∑ —Å–ø–∏—Å–∫–∞: ${ALL_TAGS.join(", ")}]\n` +
      "}\n\n" +
      "üéØ –ü–û–ú–ù–ò: 1 –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã ‚â† —Ü–µ–ª–∞—è –ø–∏—Ü—Ü–∞. –ë–æ–ª—å—à–∞—è —Ç–∞—Ä–µ–ª–∫–∞ —Å–∞–ª–∞—Ç–∞ ‚â† –º–∞–ª–µ–Ω—å–∫–∞—è. " +
      "–ö–∞–ø–ª—è –º–∞—Å–ª–∞ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ = +50 –∫–∫–∞–ª, —Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞ = +120 –∫–∫–∞–ª!" :

      // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
      "You are a professional clinical nutritionist with 15+ years experience. " +
      "Analyze food from photos/descriptions with scientific precision.\n\n" +
      "üîç STEP-BY-STEP PORTION ANALYSIS:\n" +
      "1. Identify dishware type and size (standard plate ~10in, cup ~8oz, spoon ~1tbsp)\n" +
      "2. Measure portion relative to dishware (1/2 plate, 3/4 cup)\n" +
      "3. Assess thickness/height of food layers (thin, medium, thick layer)\n" +
      "4. Find reference objects (coin ~0.8in, finger ~0.6in width)\n\n" +
      "‚ö†Ô∏è MANDATORY hidden calorie accounting:\n" +
      "- Cooking oil: 1 tbsp = 120 kcal\n" +
      "- Sauces/dressings: mayo 1 tbsp = 90 kcal, ketchup = 20 kcal\n" +
      "- Cheese: even thin layer = 40-80 kcal\n" +
      "- Cream in coffee/soup: 2 tbsp = 80 kcal\n" +
      "- Nuts/seeds: handful = 160-200 kcal\n\n" +
      "üìä CALORIE CALCULATION:\n" +
      "- Count each ingredient separately by weight\n" +
      "- Sum all components\n" +
      "- Calories to 0.1 precision (e.g., 347.8, NOT 350)\n" +
      "- Proteins/fats/carbs also with decimals\n\n" +
      "üö® WARNINGS for excesses (add to comment):\n" +
      "- Sodium >2300mg: 'Caution: high salt, possible water retention'\n" +
      "- Saturated fats >20g: 'High saturated fat content'\n" +
      "- Added sugar >25g: 'Exceeds sugar guidelines'\n" +
      "- Calories >800: 'Very high calorie meal'\n\n" +
      "üî¨ MICRONUTRIENTS (be realistic):\n" +
      "- Fiber: vegetables ~2-5g/100g, fruits ~2-10g/100g\n" +
      "- Omega-3: fish ~500-2000mg, nuts ~100-500mg\n" +
      "- Vitamin C: citrus ~50-80mg, vegetables ~10-100mg\n" +
      "- Iron: meat ~2-5mg, legumes ~2-8mg\n" +
      "- Calcium: dairy ~100-300mg, leafy greens ~100-200mg\n\n" +
      "‚ùå If NOT food (people, animals, objects), return:\n" +
      "{ \"isFood\": false }\n\n" +
      "‚úÖ If food, return precise JSON:\n" +
      "{\n" +
      "  \"isFood\": true,\n" +
      "  \"title\": \"precise dish name in English\",\n" +
      "  \"comment\": \"immediate benefits + excess warnings, friendly tone, 100-150 characters\",\n" +
      "  \"benefits\": \"what you get right now: energy, satiety, specific vitamins, 80-120 characters\",\n" +
      "  \"improvements\": \"specific improvements without numbers (add cucumber, remove mayo), " +
      "80-120 characters\",\n" +
      "  \"ingredients\": [\"all visible and hidden ingredients\", \"in English\", " +
      "\"including spices and sauces\"],\n" +
      "  \"healthy_alternatives\": \"healthy swaps (avocado instead of oil, Greek yogurt), " +
      "up to 100 characters\",\n" +
      "  \"calories\": precise number with decimals,\n" +
      "  \"proteins\": grams with decimals,\n" +
      "  \"fats\": grams with decimals,\n" +
      "  \"carbohydrates\": grams with decimals,\n" +
      "  \"fiber_mg\": fiber in mg (realistic assessment),\n" +
      "  \"omega3_mg\": omega-3 in mg,\n" +
      "  \"added_sugar_mg\": added sugar in mg,\n" +
      "  \"saturated_fats_mg\": saturated fats in mg,\n" +
      "  \"sodium_mg\": sodium in mg,\n" +
      "  \"vitamin_c_mg\": vitamin C in mg,\n" +
      "  \"iron_mg\": iron in mg,\n" +
      "  \"calcium_mg\": calcium in mg,\n" +
      `  "tags": [tags ONLY from list: ${ALL_TAGS.join(", ")}]\n` +
      "}\n\n" +
      "üéØ REMEMBER: 1 pizza slice ‚â† whole pizza. Large plate salad ‚â† small plate. " +
      "Oil drop on pan = +50 kcal, tablespoon = +120 kcal!";

    logger.info("üì© OpenAI request", {
      model: "gpt-5-mini",
      hasPhoto: !!finalPhoto,
      hasDescription: !!user_description,
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const messages = [textMsg("developer", systemPrompt)];

    if (finalPhoto) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
      let analysisText = "";

      if (user_description) {
        analysisText += `üìù User Description: "${user_description}"\n\n`;
      }

      analysisText += language === "ru" ?
        "üîç –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:\n" +
        "- –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—É–¥—ã\n" +
        "- –í–∏–¥–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n" +
        "- –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–∂–∞—Ä–µ–Ω–æ–µ, –≤–∞—Ä–µ–Ω–æ–µ, –∑–∞–ø–µ—á–µ–Ω–Ω–æ–µ)\n" +
        "- –°–æ—É—Å—ã, –º–∞—Å–ª–æ, —Å–ø–µ—Ü–∏–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏\n" +
        "- –¢–æ–ª—â–∏–Ω—É —Å–ª–æ–µ–≤ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —É–∫–ª–∞–¥–∫–∏" :
        "üîç When analyzing the photo, pay attention to:\n" +
        "- Portion size relative to dishware\n" +
        "- Visible ingredients and their quantities\n" +
        "- Cooking method (fried, boiled, baked)\n" +
        "- Sauces, oil, spices on surface\n" +
        "- Layer thickness and packing density";

      messages.push(imageMsg("user", finalPhoto, analysisText));
    } else if (user_description) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      messages.push(textMsg("user", `üìù User Description: "${user_description}"`));
    } else {
      // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
      messages.push(textMsg("user", "No image or description provided"));
    }

    const completion = await callOpenAI({
      model: "gpt-5-mini",
      messages,
      responseFormat: "json_object",
    });

    const responseText = completion.text || "{}";
    logger.info("‚úÖ OpenAI raw response:", {responseText});

    const result = JSON.parse(responseText);
    logger.info("‚úÖ Parsed OpenAI response:", result);

    if (!result.isFood) {
      logger.info("‚ÑπÔ∏è Marked as not food:", mealId);
      await mealRef.update({isAnalysing: false, isFood: false});
      return;
    }

    await mealRef.update({
      isAnalysing: false,
      isFood: true,
      photo: finalPhoto,
      blurhash_photo: blurhash ?? existingBlurhash ?? "",
      title: result.title ?? "",
      comment: result.comment ?? "", // –∏—Å–ø–æ–ª—å–∑—É–µ–º comment –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
      benefits: result.benefits ?? "",
      improvements: result.improvements ?? "",
      ingredients: result.ingredients ?? [],
      healthy_alternatives: result.healthy_alternatives ?? "",
      calories: result.calories ?? 0,
      proteins: result.proteins ?? 0,
      fats: result.fats ?? 0,
      carbohydrates: result.carbohydrates ?? 0,
      // –ù–æ–≤—ã–µ –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
      fiber_mg: result.fiber_mg ?? 0,
      omega3_mg: result.omega3_mg ?? 0,
      added_sugar_mg: result.added_sugar_mg ?? 0,
      saturated_fats_mg: result.saturated_fats_mg ?? 0,
      sodium_mg: result.sodium_mg ?? 0,
      vitamin_c_mg: result.vitamin_c_mg ?? 0,
      iron_mg: result.iron_mg ?? 0,
      calcium_mg: result.calcium_mg ?? 0,
      tags: result.tags ?? [],
    });

    logger.info("‚úÖ Meal analyzed and updated:", {mealId});

    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if (user_ref) {
      const userRef = user_ref as DocumentReference;
      const userId = userRef.id;

      // –ü–æ–ª—É—á–∞–µ–º email –¥–ª—è –ª–æ–≥–æ–≤
      const userDoc = await userRef.get();
      const userData = userDoc.data() as User;
      const userEmail = userData?.email || userId;

      logger.info(`üéØ ${userEmail}: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞ ${mealId}`);
      await generateSuggestionForUser(userId);
    }
  } catch (error) {
    logger.error("‚ùå Analysis error:", error);
    await db.collection("meals").doc(mealId).update({isAnalysing: false});

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞
    if (mealData.user_ref) {
      const userRef = mealData.user_ref as DocumentReference;
      const userId = userRef.id;
      try {
        const userDoc = await userRef.get();
        const userData = userDoc.data() as User;
        const userEmail = userData?.email || userId;

        logger.info(`üéØ ${userEmail}: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞`);
        await generateSuggestionForUser(userId);
      } catch (suggestionError) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", suggestionError);
      }
    }
  }
}
