/**
 * Generate a first personalized nutrition suggestion for a new user.
 */
import {db} from "../firebase";
import {COLLECTIONS, User} from "../types/firestore";
import {generateSuggestionForUser} from "./generateSuggestions";

/**
 * Main entry point to generate and save a first-time suggestion.
 */
export async function generateFirstSuggestionFunction(
  userId: string,
  activeCalories: number,
  passiveCalories: number,
  locale: "en" | "ru",
): Promise<string> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userDoc = await db.collection(COLLECTIONS.USERS).doc(userId).get();
  if (!userDoc.exists) {
    throw new Error("User not found");
  }

  const userData = userDoc.data() as User;
  const userEmail = userData.email || userId;

  console.log(
    `üéâ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userEmail}`
  );

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–ª–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
  await db.collection(COLLECTIONS.USERS).doc(userId).update({
    language: locale,
    active_calories: activeCalories,
    passive_calories: passiveCalories,
  });

  console.log(
    `‚öôÔ∏è ${userEmail}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–ª–æ—Ä–∏–∏ ` +
    `(–∞–∫—Ç–∏–≤–Ω—ã–µ=${activeCalories}, –ø–∞—Å—Å–∏–≤–Ω—ã–µ=${passiveCalories}), —è–∑—ã–∫=${locale}`
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–ª–∞–≥–æ–º –ø–µ—Ä–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  await generateSuggestionForUser(userId, true);

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
  const updatedUserDoc = await db.collection(COLLECTIONS.USERS).doc(userId).get();
  const updatedUserData = updatedUserDoc.data();
  const suggestion = updatedUserData?.suggestion ?? "Welcome to your nutrition journey!";

  const truncatedSuggestion = suggestion.length > 100 ?
    suggestion.slice(0, 100) + "..." :
    suggestion;
  console.log(
    `‚úÖ ${userEmail}: –ø–µ—Ä–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: "${truncatedSuggestion}"`
  );

  return suggestion;
}
