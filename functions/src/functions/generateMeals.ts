/**
 * This file generates meal suggestions using OpenAI and saves them to Firestore.
 */

import {db, bucket} from "../firebase";
import {callOpenAI, callOpenAIImage, OpenAIMessage} from "../utils/openai";
import {compressAndUploadImage} from "../utils/imageUtils";
import {GeneratedMeal, COLLECTIONS} from "../types/firestore";
import {ALL_TAGS} from "../constants/tags"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ constants
import * as admin from "firebase-admin";

/**
 * Generate meals for a specific tag using OpenAI.
 */
async function generateMealsForTag(tagName: string): Promise<GeneratedMeal[]> {
  console.log(`ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª—é–¥–∞ –¥–ª—è —Ç–µ–≥–∞: ${tagName}`);

  const systemPrompt = `You are a professional nutrition coach following MyPlate guidelines.

Generate exactly 3 diverse meals that prominently feature the tag "${tagName}".

Requirements:
- Title: max 35 characters (both languages)
- Calories: vary between ~50 (snack), ~150 (light meal), ~350 (full meal)
- Realistic American dishes, including comfort foods and healthy alternatives
- Include simple snacks (like "Apple" or "Banana") when appropriate
- Cooking time: 0-20 minutes maximum
- Mix of meal types: full meals, snacks, drinks
- IMPORTANT: Always provide detailed cooking instructions

Available tags: ${ALL_TAGS.join(", ")}

Return JSON array with this exact structure:
[
  {
    "title": "English title (‚â§35 chars)",
    "comment": "Brief English description",
    "calories": number,
    "proteins": number,
    "fats": number,
    "carbohydrates": number,
    "tags": ["tag1", "tag2"],
    "title_localized": {
      "en": "English title (‚â§35 chars)",
      "ru": "–†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (‚â§35 —Å–∏–º–≤–æ–ª–æ–≤)"
    },
    "description_localized": {
      "en": "Detailed English description of the dish, its taste, and nutritional value",
      "ru": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, –µ–≥–æ –≤–∫—É—Å–∞ –∏ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"
    },
    "benefits": {
      "en": "What's good about this food - specific health benefits, vitamins, minerals",
      "ru": "–ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –≤ —ç—Ç–æ–π –µ–¥–µ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–ª—å–∑–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è, –≤–∏—Ç–∞–º–∏–Ω—ã, –º–∏–Ω–µ—Ä–∞–ª—ã"
    },
    "improvements": {
      "en": "What could be improved - healthier cooking methods, portions, substitutions",
      "ru": "–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å - –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, –ø–æ—Ä—Ü–∏–∏, –∑–∞–º–µ–Ω—ã"
    },
    "ingredients": {
      "en": ["ingredient1", "ingredient2"],
      "ru": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç1", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç2"]
    },
    "recipe": {
      "en": "DETAILED step-by-step cooking instructions with prep time, " +
            "method, temperature, serving tips",
      "ru": "–ü–û–î–†–û–ë–ù–´–ï –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, " +
            "—Å–ø–æ—Å–æ–±–æ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π, —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ –ø–æ–¥–∞—á–µ"
    },
    "healthy_alternatives": {
      "en": "Healthy ingredient swaps and substitutions",
      "ru": "–ó–¥–æ—Ä–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"
    },
    "meal_type": "full_meal|snack|drink",
    "difficulty": "very_easy|easy|medium",
    "prep_time_minutes": number,
    "is_comfort_food": boolean,
    "is_healthy_alternative": boolean
  }
]

RECIPE EXAMPLES:
- For meals: Include cooking steps, times, temperatures
- For snacks: Include preparation and serving suggestions  
- For drinks: Include mixing instructions and proportions

Focus on realistic, achievable meals that Americans actually eat.`;

  const messages: OpenAIMessage[] = [
    {
      role: "developer",
      content: [{type: "text", text: systemPrompt}],
    },
    {
      role: "user",
      content: [{type: "text", text: `Generate 3 meals for tag "${tagName}"`}],
    },
  ];

  try {
    const textModel = "gpt-5";
    const {text: responseText, usage} = await callOpenAI({
      model: textModel,
      messages,
      responseFormat: "json_object",
      reasoningEffort: "low",
    });
    if (usage) {
      console.log("üßÆ Tokens:", {
        prompt: usage.prompt_tokens,
        completion: usage.completion_tokens,
        total: usage.total_tokens,
      });
    }
    console.log(`ü§ñ GPT –æ—Ç–≤–µ—Ç –¥–ª—è ${tagName}:`, responseText.slice(0, 200));

    const meals = JSON.parse(responseText) as GeneratedMeal[];

    if (!Array.isArray(meals) || meals.length !== 3) {
      throw new Error(`Expected 3 meals, got ${meals?.length}`);
    }

    return meals;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–≥–∞ ${tagName}:`, error);
    throw error;
  }
}

/**
 * Save a meal to Firestore with generated photo.
 */
async function saveMealToFirestore(meal: GeneratedMeal): Promise<boolean> {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª—é–¥–æ: ${meal.title}`);

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
    const imageModel = process.env.OPENAI_IMAGE_MODEL || "dall-e-3";
    const prompt =
      `Imagine a realistic photo of ${meal.title}. View from above. ` +
      "Morning soft natural light, warm and cozy kitchen ambience, " +
      "grey background. The food looks home-cooked with slight imperfections, " +
      "muted natural colors, and no artificial oversaturation. " +
      "It looks like a casual photo taken with a smartphone, not a professional studio. " +
      "The plating is slightly uneven with small crumbs or sauce drops, " +
      "making it feel authentic and homemade.";

    const {urls} = await callOpenAIImage({
      model: imageModel,
      prompt,
      size: "1024x1024",
    });

    const imageUrl = urls[0];
    if (!imageUrl) {
      throw new Error("Failed to generate image");
    }

    console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ${meal.title}`);

    // –°–∂–∏–º–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const mealId = db.collection(COLLECTIONS.GENERATED_MEALS).doc().id;
    const {photoUrl, blurhash} = await compressAndUploadImage(
      imageUrl,
      bucket,
      mealId
    );

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–ª—é–¥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const mealData: GeneratedMeal = {
      ...meal,
      photo: photoUrl,
      blurhash_photo: blurhash,
      created_time: admin.firestore.Timestamp.now(),
      language: "en", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ —Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    await db.collection(COLLECTIONS.GENERATED_MEALS).doc(mealId).set(mealData);

    console.log(`‚úÖ –ë–ª—é–¥–æ ${meal.title} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${mealId}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª—é–¥–∞ ${meal.title}:`, error);
    return false;
  }
}

/**
 * Generate and save meals for one unprocessed tag.
 */
export async function generateMealsForOneTag(): Promise<void> {
  console.log("üöÄ –ü–æ–∏—Å–∫ —Ç–µ–≥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª—é–¥...");

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    const tagsSnap = await db
      .collection(COLLECTIONS.TAGS)
      .where("isGenerated", "!=", true)
      .limit(1)
      .get();

    if (tagsSnap.empty) {
      console.log("‚úÖ –í—Å–µ —Ç–µ–≥–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
      return;
    }

    const tagDoc = tagsSnap.docs[0];
    const tagData = tagDoc.data();
    const tagName = tagData.name;

    console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥: ${tagName}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª—é–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞
    let meals: GeneratedMeal[] = [];
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        meals = await generateMealsForTag(tagName);
        break;
      } catch (error) {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, error);
        if (attempt === 3) throw error;
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ
    let savedCount = 0;
    for (const meal of meals) {
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          const success = await saveMealToFirestore(meal);
          if (success) {
            savedCount++;
            break;
          }
        } catch (error) {
          console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª—é–¥–∞ ${meal.title} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:`, error);
          if (attempt === 3) throw error;
        }
      }
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} –±–ª—é–¥ –¥–ª—è —Ç–µ–≥–∞ ${tagName}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    await db.collection(COLLECTIONS.TAGS).doc(tagDoc.id).update({
      isGenerated: true,
      updated_time: admin.firestore.Timestamp.now(),
    });

    console.log(`‚úÖ –¢–µ–≥ ${tagName} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª—é–¥ –¥–ª—è —Ç–µ–≥–∞:", error);
  }
}

