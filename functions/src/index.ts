import {defineSecret} from "firebase-functions/params";
import {onSchedule} from "firebase-functions/v2/scheduler";
import {onCall, onRequest} from "firebase-functions/v2/https";
import {onDocumentCreated} from "firebase-functions/v2/firestore";
import {analyzeMeal as analyzeMealFunction} from "./functions/analyzeMeal";
import {generateMealsForOneTag} from "./functions/generateMeals";
import {generateSuggestionsFunction} from "./functions/generateSuggestions";
import {generateFirstSuggestionFunction} from "./functions/generateFirstSuggestion";
import {generateAllTags, generateMissingTags} from "./functions/generateTags";
import {
  updateAllExistingMeals,
  updateLimitedMeals,
  updateSingleBatchOnly,
  getUpdateStats,
  isUpdateProcessRunning,
  acquireLock,
  releaseLock,
} from "./functions/updateExistingMeals";
import {generateSingleTestImage, generateImagesBatch} from "./functions/generateRecraftImages";
import "./firebase";

const OPENAI_API_KEY = defineSecret("OPENAI_API_KEY");
const RECRAFT_API_TOKEN = defineSecret("RECRAFT_API_TOKEN");

/**
 * Cloud Function to analyze a meal when a new document is created.
 */
export const analyzeMeal = onDocumentCreated(
  {
    document: "meals/{mealId}",
    secrets: [OPENAI_API_KEY], // ‚úÖ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç
  },
  async (event): Promise<void> => {
    const mealId: string = event.params.mealId;
    const mealData: Record<string, unknown> | undefined =
      event.data?.data();
    if (!mealData) return;

    await analyzeMealFunction(mealId, mealData);
  }
);

export const generateMealsJob = onSchedule(
  {
    schedule: "every 10 minutes",
    secrets: [OPENAI_API_KEY],
  },
  async () => {
    console.log("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞—Ç");

    // ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–ª—é—á –ø–æ–¥—Ç—è–Ω—É–ª—Å—è?
    const apiKeyStatus = process.env.OPENAI_API_KEY ?
      `Key loaded: ${process.env.OPENAI_API_KEY.slice(0, 7)}...` :
      "‚ùå Key is missing!";
    console.log(`üîë OpenAI API Key status: ${apiKeyStatus}`);

    await generateMealsForOneTag();
  }
);

/**
 * Cloud Function to generate personalized nutrition suggestions every hour
 */
export const generateSuggestions = onSchedule(
  {
    schedule: "every 1 hours",
    secrets: [OPENAI_API_KEY],
  },
  async () => {
    console.log("üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞—á–∞—Ç");
    await generateSuggestionsFunction();
  }
);

// ‚úÖ –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ GET-–∑–∞–ø—Ä–æ—Å—É (–¥–ª—è –¥–µ–±–∞–≥–∞)
export const generateSuggestionsManual = onRequest(
  {secrets: [OPENAI_API_KEY]},
  async (_req, res) => {
    console.log("üõ† –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞—á–∞—Ç");
    await generateSuggestionsFunction();
    res.status(200).send("‚úÖ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω");
  }
);

/**
 * Callable Function: generate first suggestion for new users
 */
export const generateFirstSuggestion = onCall(
  {secrets: [OPENAI_API_KEY]},
  async (request) => {
    const {
      userId,
      active_calories,
      passive_calories,
      locale,
    }: {
      userId: string;
      active_calories: number;
      passive_calories: number;
      locale: "en" | "ru";
    } = request.data;

    if (
      typeof userId !== "string" ||
      typeof active_calories !== "number" ||
      typeof passive_calories !== "number" ||
      !["en", "ru"].includes(locale)
    ) {
      throw new Error("Invalid input data");
    }

    const suggestion = await generateFirstSuggestionFunction(
      userId,
      active_calories,
      passive_calories,
      locale
    );

    return {suggestion};
  }
);

/**
 * Callable Function: generate all tags with translations and colors
 */
export const generateTagsWithMetadata = onCall(
  {secrets: [OPENAI_API_KEY]},
  async () => {
    await generateAllTags();
    return {success: true, message: "All tags generated successfully"};
  }
);

/**
 * Callable Function: generate only missing tags
 */
export const generateMissingTagsOnly = onCall(
  {secrets: [OPENAI_API_KEY]},
  async () => {
    await generateMissingTags();
    return {success: true, message: "Missing tags generated successfully"};
  }
);

/**
 * HTTP endpoint for REgenerating ALL tags with new colors (for testing)
 */
export const generateTagsWithMetadataHttp = onRequest(
  {
    secrets: [OPENAI_API_KEY],
    timeoutSeconds: 540, // 9 –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º—É–º –¥–ª—è HTTP —Ñ—É–Ω–∫—Ü–∏–π)
    memory: "1GiB", // –ë–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  },
  async (_req, res) => {
    try {
      console.log("üé® –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –í–°–ï–• —Ç–µ–≥–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –Ω–∞—á–∞—Ç");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—Å—è
      res.status(202).json({
        success: true,
        message: "Tag regeneration started. Check logs for progress.",
        status: "processing",
      });

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –í–°–ï–• —Ç–µ–≥–æ–≤ (–≤–∫–ª—é—á–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
      generateAllTags().then(() => {
        console.log("‚úÖ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
      }).catch((error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤:", error);
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * HTTP endpoint for generating missing tags only (for testing)
 */
export const generateMissingTagsOnlyHttp = onRequest(
  {
    secrets: [OPENAI_API_KEY],
    timeoutSeconds: 540, // 9 –º–∏–Ω—É—Ç
    memory: "1GiB",
  },
  async (_req, res) => {
    try {
      console.log("üõ† –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤ –Ω–∞—á–∞—Ç");
      await generateMissingTags();
      res.status(200).json({
        success: true,
        message: "Missing tags generated successfully",
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–≥–æ–≤:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * HTTP endpoint for generating meals (for testing)
 */
export const generateMealsManual = onRequest(
  {
    secrets: [OPENAI_API_KEY],
    timeoutSeconds: 540, // 9 –º–∏–Ω—É—Ç
    memory: "1GiB",
  },
  async (_req, res) => {
    try {
      console.log("üõ† –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª—é–¥ –Ω–∞—á–∞—Ç");
      await generateMealsForOneTag();
      res.status(200).json({
        success: true,
        message: "Meals generation completed",
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª—é–¥:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * HTTP endpoint for updating all existing meals with new descriptions
 */
export const updateExistingMealsHttp = onRequest(
  {
    secrets: [OPENAI_API_KEY],
    timeoutSeconds: 540, // 9 –º–∏–Ω—É—Ç
    memory: "2GiB", // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è GPT-4o
  },
  async (_req, res) => {
    try {
      const message = "üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª—é–¥ " +
                      "—Å GPT-4o –Ω–∞—á–∞—Ç";
      console.log(message);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—Å—è
      res.status(202).json({
        success: true,
        message: "Meals update with GPT-4o started. This will take a long time. " +
                 "Check logs for progress.",
        status: "processing",
        estimatedDuration: "Several hours depending on number of meals",
      });

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      updateAllExistingMeals().then(() => {
        console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–ª—é–¥ —Å GPT-4o –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
      }).catch((error: Error) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥:", error);
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * HTTP endpoint for updating limited number of meals (for testing)
 */
export const updateLimitedMealsHttp = onRequest(
  {
    secrets: [OPENAI_API_KEY],
    timeoutSeconds: 300,
    memory: "1GiB",
  },
  async (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 5;
      console.log(`üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${limit} –±–ª—é–¥ –Ω–∞—á–∞—Ç–æ`);

      await updateLimitedMeals(limit);

      res.status(200).json({
        success: true,
        message: `${limit} meals updated successfully`,
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * Scheduled function to update meals every 5 minutes (one batch at a time)
 */
export const scheduledMealsUpdate = onSchedule(
  {
    schedule: "*/5 * * * *", // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    timeZone: "Europe/Moscow", // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    secrets: [OPENAI_API_KEY],
    memory: "2GiB",
    timeoutSeconds: 300, // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
  },
  async (_event) => { // –î–æ–±–∞–≤–ª—è–µ–º underscore —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    console.log("üïê –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥...");

    void _event;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      if (await isUpdateProcessRunning()) {
        console.log("‚è∏Ô∏è –î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω –±–∞—Ç—á
      const result = await updateSingleBatchOnly();

      if (result.processed === 0) {
        console.log("‚úÖ –í—Å–µ –±–ª—é–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
      } else {
        const message = `‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processed}, ` +
          `–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result.updated}`;
        console.log(message);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
    }
  }
);

/**
 * Manual trigger to start/stop scheduled updates
 */
export const toggleScheduledUpdates = onRequest(
  {
    secrets: [OPENAI_API_KEY],
    timeoutSeconds: 60,
  },
  async (req, res) => {
    const action = req.query.action as string;

    try {
      if (action === "status") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        const isRunning = await isUpdateProcessRunning();
        const stats = await getUpdateStats();

        res.json({
          success: true,
          isRunning,
          stats,
          message: `Scheduled updates ${isRunning ? "–∞–∫—Ç–∏–≤–Ω—ã" : "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã"}`,
        });
      } else if (action === "stop") {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
        await acquireLock();
        res.json({
          success: true,
          message: "Scheduled updates –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
        });
      } else if (action === "start") {
        // –ó–∞–ø—É—Å–∫–∞–µ–º (—Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
        await releaseLock();
        res.json({
          success: true,
          message: "Scheduled updates –∑–∞–ø—É—â–µ–Ω—ã",
        });
      } else {
        res.status(400).json({
          success: false,
          error: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ?action=status|start|stop",
        });
      }
    } catch (error) {
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * Test function: generate one Recraft image
 */
export const testRecraftImageGeneration = onRequest(
  {
    secrets: [RECRAFT_API_TOKEN],
    timeoutSeconds: 300, // 5 –º–∏–Ω—É—Ç
    memory: "1GiB",
  },
  async (_req, res) => {
    try {
      console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Recraft –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...");

      await generateSingleTestImage();

      res.status(200).json({
        success: true,
        message: "Test image generated successfully! Check logs for URL.",
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }
);

/**
 * Scheduled function: generate meal images every 5 minutes (10 at a time)
 */
export const scheduledRecraftImageGeneration = onSchedule(
  {
    schedule: "*/5 * * * *", // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    timeZone: "Europe/Moscow",
    secrets: [RECRAFT_API_TOKEN],
    memory: "2GiB",
    timeoutSeconds: 300, // 5 –º–∏–Ω—É—Ç
  },
  async (_event) => { // –î–æ–±–∞–≤–ª—è–µ–º underscore
    console.log("üïê –ó–∞–ø—É—Å–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Recraft –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...");

    void _event;

    try {
      const result = await generateImagesBatch();

      if (result.processed === 0) {
        console.log("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –†–µ–≥—É–ª—è—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
      } else {
        const message = `‚úÖ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processed}, ` +
          `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${result.generated}, –æ—à–∏–±–æ–∫ ${result.failed}`;
        console.log(message);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
    }
  }
);
